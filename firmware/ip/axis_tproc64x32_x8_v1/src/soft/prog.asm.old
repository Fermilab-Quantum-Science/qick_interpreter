// Read input ports.
		read  0, 2, upper $3;
		read  0, 2, lower $4;
		read  1, 0, upper $3;
		read  1, 0, lower $4;
		read  2, 0, upper $5;
		read  2, 0, lower $6;
		read  3, 1, upper $1;
		read  3, 1, lower $2;

// Basic math.
		regwi 0, $1, 0x1234;
		regwi 0, $2, -1234;
		regwi 0, $3, 7;

LOOP:	math 0, $1, $1 + $2;
		loopnz 0, $3, @LOOP;

		// Some time offset to start.
		synci 1000;

// Nested loops and stack.
		regwi 0, $9, 0; 	// memory address.
		regwi 0, $1, -5000; // df
		regwi 0, $3, 34; 	// dg
		regwi 0, $5, 100; 	// dn
		regwi 0, $8, 50;	// t
		
		regwi 0, $2, 120000; 	// freq
		regwi 0, $7, 5;			// i = 5

// Loop freq.
FREQ:	math  0, $2, $2 + $1; 	// freq = freq + df
		regwi 0, $4, 120;		// gain = 120
		pushi 0, $7, $7, 3;		// i -> stack, j = 3

		// Loop gain.
		GAIN:	math  0, $4, $4 + $3; 	// gain = gain + dg
				regwi 0, $6, 25; 		// nsamples = 25
				pushi 0, $7, $7, 6; 	// j -> stack, k = 6

				// Loop nsamp.	
				NSAMP:	math   0, $6, $6 + $5; 	// nsamp = nsamp + dn
						// Output value on port.
						set    0, 0, $2, $0, $4, $0, $6, $7;
						synci 150;
						loopnz 0, $7, @NSAMP;	// loop k
				
				popi   0, $7; 			// stack -> j
				loopnz 0, $7, @GAIN; 	// loop j

		popi   0, $7;			// stack -> i
		memw   0, $2, $9;		// freq -> mem[$9]
		mathi  0, $9, $9 + 1;
		loopnz 0, $7, @FREQ;	// loop i

// Signal end of first pass.
		regwi  0, $1, 0x0ABCD;
		regwi  0, $2, 0x01234;
		memwi  0, $1, 100;		// mem[100] = 0x0ABCD
		memwi  0, $0, 101;		// mem[101] = 0
WAITF0:	memri  0, $1, 101;		// $1 = mem[101]
		condj  0, $1 != $2, @WAITF0;

// Wait memory upload.
		regwi  0, $1, 0x0ABCD;
		regwi  0, $2, 0x01234;
		memwi  0, $1, 100;		// mem[100] = 0x0ABCD
		memwi  0, $0, 101;		// mem[101] = 0
WAITF1:	memri  0, $1, 101;		// $1 = mem[101]
		condj  0, $1 != $2, @WAITF1;

// Read/modify/write.
		regwi  0, $1, 0; 		// Address.
		regwi  0, $2, 54;		// i.
LOOP0:	memr   0, $3, $1;		// $3 = mem[$1]
		mathi  0, $3, $3*2;
		memw   0, $3, $1;		// mem[$1] = $3.
		mathi  0, $1, $1 + 1;	// Address = address + 1.
		loopnz 0, $2, @LOOP0;

		// End of program.
		end;
		
